var documenterSearchIndex = {"docs":
[{"location":"examples/quadratic_state_space_examples/#Quadratic-State-Space-Examples","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"This tutorial provides additional features for linear models","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"note: Note\nThis tutorial assumes you have read the Ordinary Differential Equations tutorial, the mathematics of the State Spaces Models, and the more general State Space Examples tutorial.In addition, this package uses the MatrixFreeOperator in DiffEqOperators.jl to wrap the general linear equations.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"The canonical form of the linear model is","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"$","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"u{n+1} = A(p, tn) un + B(p,tn) w{n+1} $ with $ zn = C(p, tn) un +  v_n $","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"where we will tend to use v_n sim N(0 R) and w_n+1 sim N(0I).","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"However, we will implement  on the the linear-time invariant (LTI) version, $ u{n+1} = A un +  B w{n+1} $ with $ zn = C un +  vn $ and v_n sim N(0 R) where A B C and R may be parameterized by p.","category":"page"},{"location":"examples/quadratic_state_space_examples/#Example-1:-Linear-(and-Time-Invariant)-State-Space-Model","page":"Quadratic State Space Examples","title":"Example 1: Linear (and Time-Invariant) State Space Model","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Creating a LinearStateSpaceProblem and simulating it for a simple, linear equation.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"using DifferentialEquations, LinearAlgebra, Distributions, Random, Plots\nA = [0.8 0.0; 0.1 0.7]\nB = Diagonal([0.1, 0.5])\nC = [0.5 0.5] # one observable\nR = [0.01]\n\n# Simulate data\nT = 10\nu₀=[0.0, 0.1]\ntspan = (0, T)\n\nprob = LinearStateSpaceProblem(A,B,u₀,tspan; C = C, R = R)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"We can solve the model to simulate a path.  Since we have not provided the w_t or v_t sequence, it will simulate it using the default Gaussian draws.  The use of the algorithm LinearGaussian() is a specialization","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"sol = solve(prob, LinearGaussian())  # default algorithm is linear-gaussian iteration\n@show sol[1]  # This is the observation at the first time period.\n@show sol[1,:]  # the observation of the first value for all periods\n\nplot(sol)  # or plot(sol.z)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"The u state is not-observable in the primary output.  To access the simulated values,","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"plot(sol.u)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"note: Note\nSince the output of the state space model is the observables, sol[i,j] refers to sol.z[i,j] instead of sol.u[i,j]","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Assuming that you chose to save the noise and the observational_noise (i.e. solve(prob; save_noise = true, save_observational_noise = true) are the defaults, then you can also access them through","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"plot(sol.W)  # noise on the evolution equation\nplot(sol.V)  # observational noise, if it exists.\n````\n\n## Example 2: Kalman Filter for LTI System\n\nHere, we will setup a `LinearStateSpaceProblem` with a prior, and calculate the likelihood of the observables using the `KalmanFilter` (which will be exact in this case since we provide a linear gaussian model).\n","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"julia p = [0.8, 0.05, 0.01] T = 10 u₀_prior = MvNormal([0.0, 0.1], Diagonal([0.01, 0.01]) tspan = (0, T)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"prob = LinearStateSpaceProblem(A, B, u₀_prior, tspan; C = C, R = R)  # prior for initial condition","category":"page"},{"location":"examples/quadratic_state_space_examples/#Simulate-some-observables,-where-u0-is-drawn-from-the-prior","page":"Quadratic State Space Examples","title":"Simulate some observables, where u0 is drawn from the prior","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"solsim = solve(prob, LinearGaussian()) z = solsim","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"\nThen, attach the observables, and calculate the likelihood,\n","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"julia prob = LinearStateSpaceProblem(A, B, u₀prior, tspan; C = C, R = R, observables = z) sol = solve(prob, KalmanFilter(); saveeverystep = true) @show sol.logpdf","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"\nOr, we can use the `sol` to extract the sequence of posteriors.\n","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"julia","category":"page"},{"location":"examples/quadratic_state_space_examples/#Or-to-extract-the-posteriors","page":"Quadratic State Space Examples","title":"Or to extract the posteriors","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"plot(sol.t, [mean(posterior) for posterior in sol.posteriors]) plot(sol.t, [cov(posterior) for posterior in  sol.posteriors])  # posterior covariance","category":"page"},{"location":"examples/quadratic_state_space_examples/#TODO:-add-recipe-of-some-sort?-posterior-mean-and-the-5th/95th-quantiles-around-it?","page":"Quadratic State Space Examples","title":"TODO: add recipe of some sort?  posterior mean and the 5th/95th quantiles around it?","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"plot(sol)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"\nTo run the filter without storing the intermediate values (e.g. if you only need the log likelihood), use the standard `solve` options - where `save_everystep = false` is the default.\n","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"julia sol = solve(prob, KalmanFilter(); saveeverystep = false, saveposteriors = false) sol.t  # does not save all time periods and saves no posteriors","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"\nNote: If we wish to run a smoother, we can replace the algorithm with `KalmanSmoother()`, which will update the `u` and `posteriors` on its back-pass.\n\n\n## Example 3: Differentiating the Kalman Filter\n\nWe are then able to differentiate the filter.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"julia function logpdf_KF(z, u₀, p)     # parameterize matrices     A = [p[1] 0.0; 0.1 0.7]     B = Diagonal([0.1, p[2]])     C = [0.5 0.5]     R = [p[3]]  # one observable","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"prob = LinearStateSpaceProblem(A, B, u₀,tspan; C=C, R=R)  # Gaussian noise\nreturn solve(prob, KalmanFilter(), save_everystep = false).logpdf","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"end gradient(p -> logpdf_KF(z, u₀, p), p) ```","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Note that we have bound the initial prior but could have parameterized and differentiated that as well.","category":"page"},{"location":"examples/state_space_types/#Constructors","page":"-","title":"Constructors","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"LinearStateSpaceProblem{isinplace}(f,g,u0,tspan,p=NullParameters();kwargs...) : Defines the discrete problem with the specified functions for a linear-operator.","category":"page"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"Parameters are optional, and if not given then a NullParameters() singleton will be used which will throw nice errors if you try to index non-existent parameters.","category":"page"},{"location":"examples/state_space_types/#Fields","page":"-","title":"Fields","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"f: The evolution function.\ng: The noise function.\nh: The observation function. Defaults perfect observability of the underlying state (i.e. h(u p t_n) = u)\nD: The observation noise distribution. Defaults nothing.\nu0: The initial condition, which might be a vector or a prior distribution.\ntspan: The timespan for the problem.\np: The parameters for the problem. Defaults to NullParameters\nnoise: The noise process applied to the noise upon generation. Only Gaussian white noise is currently supported unless values are specified directly\nobservables: The observables to match when filtering.  Defaults to nothing\nkwargs: The keyword arguments passed onto the solves.","category":"page"},{"location":"examples/state_space_types/#Note-About-Timing","page":"-","title":"Note About Timing","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"Note that if no dt nor tstops is given, it's assumed that dt=1 and thus tspan=(0,T) will solve for T+1 iterations. If in the solver dt is given, then the number of iterations will change. And if tstops is not empty, the solver will revert to the standard behavior of fixed timestep methods, which is \"step to each tstop\".","category":"page"},{"location":"examples/state_space_types/#Likelihood-and-Filtering-Calculations","page":"-","title":"Likelihood and Filtering Calculations","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"Certain solve algorithms will run a filter on the unobservable u states and compare to the observables if provided.  In that case, it might do so (1) with unobservable w_t noise; or (2) conditioning on a particular sequence of w_t+1 shocks, where the likelihood depends on the unknown observational error v_t.","category":"page"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"If an algorithm is given for the filtering, then the return type of solve will have access to a logpdf for the log likelihood.  In addition, the solution will provide information on the sequence of posteriors (and smoothed values, if required).","category":"page"},{"location":"examples/state_space_types/#Joint-Likelihood","page":"-","title":"Joint Likelihood","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"In the case of a joint-likelihood where the noise (i.e. w_t) is given it is not a hidden markov model and the log likelihood simply accumulates the likelihood of each observation. $ \\mathcal{L}(z, u0, w) = \\sum{n=1}^N \\log P\\left(vt, tn\\right)  $ where $ vt = zn - h(un, p, tn)\\\nu{n+1} = f(un,p,tn) + g(un,p,tn) w{n+1} $ The density is In the case of the typical Gaussian errors, it would be $ zn - h(un, p, t_n) \\sim D $ where a common case is D = N(0 R)","category":"page"},{"location":"examples/state_space_types/#Linear-Filtering-for-the-Marginal-Likelihood","page":"-","title":"Linear Filtering for the Marginal Likelihood","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"When the system is linear, there is an exact likelihood for the marginal likelihood using the Kalman Filter.  Unlike the previous example, this is a marginal likelihood and not conditional on the noise, w,i.e.  mathcalL(z u_0).","category":"page"},{"location":"examples/state_space_types/#Nonlinear-Filtering-for-the-Marginal-Likelihood","page":"-","title":"Nonlinear Filtering for the Marginal Likelihood","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"The marginal likelihood can be calculated through a particle filter or unscented Kalman Filter.","category":"page"},{"location":"examples/state_space_types/#Solution-Types","page":"-","title":"Solution Types","text":"","category":"section"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"The solutions provided by the solve are either a StateSpaceSolution or StateSpaceFilterSolution depending on the algorithm choice.  It provided as consistent as possible of an interface with RODESolution as possible, subject to the difference between observables and latent states in a hidden Markov model.","category":"page"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"The type does not have the interp and other features not used by a discrete-time model, but adds:","category":"page"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"observables: the observable\nV: the observational noise (if appropriate and not calculating a likelihood) \nlogpdf: the likelihood of the set of observations.  This may be calculated as the accumulated likelihood given observational noise if the noise is passed in as an argument (i.e. if it conditions on a particular set of w_t, it is not a hidden markov model)","category":"page"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"In the case of the StateSpaceFilterSolution type, which represents the solution to filtering with a latent state,","category":"page"},{"location":"examples/state_space_types/","page":"-","title":"-","text":"u: is the posterior mean of the latent state, potentially smoothed if those algorithms are chosen.\nposteriors: A sequence of Distributions if a hidden Markov model.\nNeither W nor V are available as they have been marginalized.","category":"page"},{"location":"examples/general_state_space_examples/#General-State-Space-Examples","page":"General State Space Examples","title":"General State Space Examples","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"This tutorial will introduce you to the functionality for solving discrete-time models with an observation equation. Other introductions can be found by checking out DiffEqTutorials.jl. The Linear State Space Examples provides specialized algorithms when the models are linear and linear-quadratic.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"note: Note\nThis tutorial assumes you have read the Ordinary Differential Equations tutorial and the mathematics of the State Spaces Models","category":"page"},{"location":"examples/general_state_space_examples/#Example-1:-General-State-Space-Model","page":"General State Space Examples","title":"Example 1: General State Space Model","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"The canonical form of the nonlinear model with additive noise is","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"$","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"u{n+1} = f(un,p,tn) + g(un,p,tn) w{n+1} $ with $ zn = h(un, p, tn) +  vn $","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"In additional, we will tend to use v_n sim D.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"Frequently, the D = N(0 R) and w_n+1 sim N(0I).","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"Creating a StateSpaceProblem and simulating it for a simple, linear equation.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"using DifferentialEquations, LinearAlgebra, Distributions, Random, Plots\n\nf(u, p, t) = [p[1] 0.0; 0.1   0.7] * u\ng(u, p, t) = Diagonal([0.1, p[2]])\nh(u, p, t) = [0.5 0.5] * u\nR = [p[3]]  # one observable\n\n# Simulate data\np = [0.8, 0.05, 0.01]\nT = 10\nu₀=[0.0, 0.1]\ntspan = (0, T)\nD = MvNormal(0, R)\nprob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, D = D)\n\n# TODO:  TEMPORARY TESTING CODE!  REPLACE WITH `solve` BELOW WHEN FUNCTIONAL\ndraw_from_prior(u0::AbstractVector) = u0  # degenerate prior\ndraw_from_prior(u0) = rand(u0) # otherwise, assume it is a distribution\nperfect_observation(u,p,t) = u\nfunction simulate_example(f, g, u0_prior, p, tspan; c = perfect_observation, d = nothing, noise = nothing)\n\n    T = tspan[2] - tspan[1]  # hardcoded right now\n\n    # Draw from prior (or use as a degeenrate initial condition)\n    u0 = draw_from_prior(u0_prior)\n    B_0 = g(u0, p, 0)\n    C_0 = c(u0, p, 0)\n    n_u, n_w = size(B_0)\n    n_z = length(C_0)\n\n    w = isnothing(noise) ? [randn(n_w) for _ in 1:T] : noise\n\n    u = u0\n    v = isnothing(d) ? zeros(n_z) : rand(MvNormal(zeros(n_z), d(u, p, 0)))\n    z =  c(u, p, 0) .+ v\n    us = [u]\n    zs = [z]\n    vs = [v]\n    for t in 1:T\n        u = f(u, p, t-1) .+ g(u, p, t-1) * w[t]\n        v = isnothing(d) ? zeros(n_z) : rand(MvNormal(zeros(n_z), d(u, p, t)))\n        z =  c(u, p, t) .+ v\n        push!(us, u)\n        push!(zs, z)\n        push!(vs, v)\n    end\n    t = 0:T  # hardcoded\n    t_w = 1:T  # none time 0.\n    return (u=DiffEqArray(us, t), z=DiffEqArray(zs,t), v=DiffEqArray(v,t), w=DiffEqArray(w,t_w))\nend\nu, z, v, w = simulate_example(f, g, u₀, p,tspan; c = c, d = d)\n#u, z, v, w = simulate_example(f, g, MvNormal(u₀, Diagonal([0.01, 0.02])), p,tspan; c = c, d = d)\n#sol = z\n## END REMOVE","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"We can solve the model to simulate a path.  Since we have not provided the w_t or v_t sequence, it will simulate it using the default Gaussian draws.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"sol = solve(prob)  # default algorithm is just iteration\n@show sol[1]  # This is the observation at the first time period.\n@show sol[1,:]  # the observation of the first value for all periods\n\nplot(sol)  # or plot(sol.z)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"The u state is hidden. To access the simulated values,","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"plot(sol.u)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"note: Note\nSince the output of the state space model is the observables, sol[i,j] refers to sol.z[i,j] instead of sol.u[i,j]","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"Assuming that you chose to save the noise and the observational_noise (i.e. solve(prob; save_noise = true, save_observational_noise = true) are the defaults, then you can also access them through","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"plot(sol.W)  # noise on the evolution equation\nplot(sol.V)  # observational noise, if it exists.\n````\n\n\nWhile not necessary here, if other algorithms are available they are passed as with other SciML solve arguments (e.g. the default is `solve(prob, AdditiveNoiseIteration())`).\n\n## Example 2: Simulating Given Noise\n\nWe can simulate the problem given a particular noise process.  For now, we will assume that there is no observational noise - i.e., using the default `D = nothing`.\n\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, noise = W)  # removed observational noise, fixing W","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\nWe can simulate this given an external `noise` argument which replaces the default random gaussian used in `solve`.  Here, we provide an impulse at the 2nd time period.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia W = [[0.0, 0.0]] W = vcat([[0.0, 0.0]],          [[1.0, 1.0]], # impulse at 2nd period          [zeros(2) for _ in 3:T]) sol = solve(prob)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"plot(sol)  # dynamics with impulse at 2nd period","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\n## Example 3: Differentiating the Solution Given Noise\n\nThe `StateSpace` model and its `solve` support differentiation.  For example, we can simulate a sequence of observables using our `p` and a random `W`.\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia W = [rand(2) for _ in 1:T] prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, noise = W)  # no observational noise z = solve(prob)  # simulated observables","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\nThen, we will define a function which stakes in the `W` and `p` and calculates the sum-of-squares deviation from the data.\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia function sumsquaredloss(z, u₀, p, W)    prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, noise = W)    sol = solve(prob)    return norm(sol .- z, 2)  # sum of squares of deviations. end sumsquaredloss(z, u₀, p, W)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"As expected, the deviation is zero since we fed in the exact initial condition, paramere, and noise vectors.\n\nNow let us see the gradient of this function as we change `p` and/or `W` using Zygote's reverse-mode AD.\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia using Zygote gradssloss = gradient((p, W) -> sumsquaredloss(z, u₀, p, W), p, W)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"In the above, we have bound the initial condition and the data to make it a function of only `p` and `W` and then differentiated the loss function with respect to the parameters and noise.\n\n## Example 4: Likelihood and Gradient Given Noise\n\nInstead of an ad-hoc loss function above, we might want to calculate the likelihood of the data given the solution to the model.  This could be done by using the `d(..)` for each period and comparing the log-likelihood of the observables, for example.\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"D = MvNormal(zeros(1), [p[3]])  # one observable function manuallogpdfgivennoise(z, u₀, p, W)    prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, noise = W)  # not simulating with observation error    sol = solve(prob)    loglik = 0.0    D = MvNormal(zeros(2), R)    for (n, z) in enumerate(sol)       loglik += logpdf(D, z[n] .- sol[n])  # log pdf of observable     end     return loglik end gradmanuallogpdf = gradient((p, W) -> manuallogpdfgivennoise(z, u₀, p, W), p, W)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\nAlteratively, we can leave the observation error in the model itself, and use a filter to calculate the log likelihood.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia u₀prior = u₀ # degenerate prior prob = StateSpaceProblem(f,g,u₀prior,tspan,p; h = h, D = D, noise = W, observables = z) # gaussian observation error, u₀ constant prior","category":"page"},{"location":"examples/general_state_space_examples/#The-NoiseConditionalFilter-calculates-the-likelihood-given-the-noise","page":"General State Space Examples","title":"The NoiseConditionalFilter calculates the likelihood given the noise","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"sol = solve(prob, NoiseConditionalFilter())  # runs the filter given the prior sol.logpdf  # log likelihood, additional return type from a filter algorithm","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"Which can also be differentiated,","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia function logpdfgivennoise(z, u₀, p, W)    prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, D=D, noise = W, observables = z)  # Gaussian noise    return solve(prob, NoiseConditionalFilter()).logpdf end gradient((p, W) -> logpdfgivennoise(z, u₀, p, W), p, W)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"Note that when we are creating the StateSpaceProblem, the `u₀` for filtering is interpreted as a prior (and a degenerate prior if it is constant).\n\n## Example 5: Ensemble\n\n!!! note\n\n    Since the `y` is the observable in the state space, all ensemble features use the `sol = sol.z`.  For now, a limitation is that length of `y` and `u` must be the same.  To access the underlying `u`, add it to the observation equation, or implement an `output_func` callback.\n\nFirst, we will make a small change to our model to add a second observable.\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"f(u, p, t) = [p[1] 0.0; 0.1   0.7] * u g(u, p, t) = Diagonal([0.1, p[2]]) c(u, p, t) = [0.5 0.5; 0.0 1.0] * u d(u, p, t) = [p[3]; 0.01]  # two observables","category":"page"},{"location":"examples/general_state_space_examples/#Simulate-data","page":"General State Space Examples","title":"Simulate data","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"p = [0.8, 0.05, 0.01] T = 10 u₀=[0.0, 0.1] tspan = (0, T) D = MvNormal(zeros(2), Diagonal([p[3]; 0.01])) prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, D = D) sol = solve(prob) plot(sol, vars = [1])  # Plot the first variable.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\nRather than plotting a single simulation, we can calculate [ensembles](https://diffeq.sciml.ai/stable/features/ensemble/) in parallel,","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia ensembleprob = EnsembleProblem(prob)  # could add outputfunc, reduction, uinit, etc. sol = solve(ensembleprob,EnsembleThreads(),trajectories=1000)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\nGiven the ensemble solution, summary statistics and plotting are standard\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia summ = EnsembleSummary(sol)  # the mean, 5th, and 95th quantiles by default plot(summ)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\n## Example 6: Nonlinear Filtering\n**NOTE: SPECULATIVE, FUTURE VERSIONS!**  \nWhile the previous examples calculate the likelihood conditioning on the `w_t` process, to calculate the marginal likelihood over all `w_t, v_t` shocks we need to choose a a nonlinear filter given a prior on the initial state.\n\n!!! note\n\n    See [linear state space examples](@ref linear_state_space_examples) for cases with exact likelihoods given the Kalman Filter.\n\n\nHere, we will setup a `StateSpaceProblem` with a prior, and calculate the likeihood of the observables using the `UnscentedKalmanFilter` (which will be exact in this case since we provide a linear gaussian model).\n\nTODO: Do we need to pass in the jacobian for the UKF?\n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia f(u, p, t) = [p[1] 0.0; 0.1   0.7] * u g(u, p, t) = Diagonal([0.1, p[2]]) h(u, p, t) = [0.5 0.5] * u","category":"page"},{"location":"examples/general_state_space_examples/#Simulate-data-2","page":"General State Space Examples","title":"Simulate data","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"p = [0.8, 0.05, 0.01] T = 10 u₀_prior = MvNormal([0.0, 0.1], Diagonal([0.01, 0.01]) D = MvNormal([0.0], [p[3]])  # one observable tspan = (0, T)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"prob = StateSpaceProblem(f,g,u₀_prior,tspan,p; h = h, D = D, observables = z)  # prior for initial condition","category":"page"},{"location":"examples/general_state_space_examples/#Simulate-some-observables,-where-u0-is-drawn-from-the-prior","page":"General State Space Examples","title":"Simulate some observables, where u0 is drawn from the prior","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"z = solve(prob)","category":"page"},{"location":"examples/general_state_space_examples/#calculate-the-likelihood-of-those-observations-with-the-UKF","page":"General State Space Examples","title":"calculate the likelihood of those observations with the UKF","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"sol = solve(prob, UnscentedKalmanFilter(); save_everystep = true) @show sol.logpdf","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"Or, we can use the `sol` to extract the sequence of posteriors.\n\nThe default from `sol[i]` is the mean of the i'th posterior, where `sol.posterior[i]` gives the posterior distribution, which has a `cov` since it is of type `MvNormal` here.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia plot(sol.u)  #  posterior mean?  Or smoothed?  Careful? plot(sol.t, [cov(posterior) for posterior in sol])  # posterior covariance","category":"page"},{"location":"examples/general_state_space_examples/#TODO:-or-add-a-recipe-of-some-sort?-posterior-mean-and-the-5th/95th-quantiles-around-it?","page":"General State Space Examples","title":"TODO: or add a recipe of some sort?  posterior mean and the 5th/95th quantiles around it?","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"plot(sol)","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"To run the filter without storing the intermediate values (e.g. if you only need the log likelihood), use the standard `solve` options - where `save_everystep = false` is the default.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia sol = solve(prob, UnscentedKalmanFilter(); save_everystep = false, observables = z) sol.t  # Only the beginning and end.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"\nIf we wish to run a smoother, we can replace `UnscentedKalmanFilter()` with `UnscentedKalmanSmoother()`.\n\nAs before, we are able to differentiate the filter.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"julia function logpdfUKF(z, u₀, p)    prob = StateSpaceProblem(f,g,u₀,tspan,p; h = h, D=D)  # Gaussian noise    return solve(prob,UnscentedKalmanFilter(); observables = z, saveeverystep = false).logpdf end gradient(p -> logpdf_UKF(z, u₀, p), p) ``` Note that we have bound the initial prior but could have parameterized and differentiated that as well.","category":"page"},{"location":"#DifferenceEquations.jl","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"This package simulates for initial value problems for deterministic and stochastic difference equations, with or without a separate observation equation.  In addition, the package provides likelihoods for some standard filters for estimating state-space models.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Relative to existing solvers, this package is intended to provide differentiable solvers and filters.  For example, you can simulate a linear gaussian state space model and find the gradient of the solution with respect to the model primitives.  Similarly, the likelihood for the Kalman Filter can itself be differentiated with respect to the underlying model primitives.  This makes the package especially amenable to estimation and calibration where the entire solution blocks become auto-differentiable.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"note: Note\nBoundary value problems and difference-algebraic equations are not in scope. See see DifferentiableStateSpaceModels.jl for experimental support for perturbation solutions and DSGEs.","category":"page"},{"location":"#Installation","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Installation","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Assuming that you already have Julia correctly installed, it suffices to import DifferenceEquations.jl in the standard way:","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"] DifferenceEquations","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"For additional functionality, you may want to add Plots, DiffEqBase.  If you want to explore differentiable filters, you can install Zygote","category":"page"},{"location":"#Mathematical-Specification-of-a-Discrete-Problem","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Mathematical Specification of a Discrete Problem","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"For comparison, see the specification of the deterministic Discrete Problem (albeit with a small difference in timing conventions) and the SDE Problem.  Other introductions can be found by checking out DiffEqTutorials.jl.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"The general class of problems intended to be supported in this package is to take an initial condition, u_0, and an evolution equation","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"u_n+1 = f(u_npt_n) + g(u_npt_n) w_n+1","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"for some functions f and g, and where w_n+1 are IID random shocks to the evolution equation.  The p is a vector of potentially differentiable parameters.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"In addition, there is an optional observation equation","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"z_n = h(u_n p t_n) +  v_n","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"where v_n is noisy observation error and the size of z_n may be different from u_n.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"A few notes on the structure:","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Frequently, the g provides the covariance structure so a reasonable default is w_n+1 sim N(0I), and z_n sim N(0 D) is a common observation error for some covariance matrix D.\nIf fgh are all linear, and the shocks are both gaussian, then this is a linear gaussian state-space model.  Kalman filters can be used to calculate likelihoods and simulates can be executed with very little overhead.\nt_n is the current time at which the map is applied where t_n = t_0 + n*dt (with dt=1 being the default).\nIf f g h are not functions of time, then it is a time-invariant state-space model.","category":"page"},{"location":"#Current-Status","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Current Status","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"At this point, the package does not cover all of the variations on these features. In particular,","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"It only supports linear and quadratic f g h functions.  General fg will be next.\nIt only supports time-invariant functions\nThere is limited support for non-Gaussian w_n and v_n processes.\nIt does not support linear or quadratic functions parameterized by the p vector for differentiation\nThere are some hardcoded types which prevent it from working with fully generic arrays\nIt does not support in-place vs. out-of-place, support static arrays, or matrix-free linear operators.\nWhile many functions in the SciML framework are working, support is incomplete.\nThere is not complete coverage of gradients for the solution for all parameter inputs/etc.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"To help contribute on filling in these features, see the issues.","category":"page"},{"location":"examples/linear_state_space_examples/#Linear-State-Space-Examples","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"This tutorial provides describes the support for linear and linear gaussian state space models.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"At this point, the package only supports linear time-invariant models without a separate p vector.  The canonical form of the linear model is","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"u_n+1 = A u_n + B w_n+1","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"with","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"z_n = C u_n +  v_n\n\n\nand v_n sim N(0 D) and w_n+1 sim N(0I)\n\n\n Example 1 Linear (and Time-Invariant) State Space Model\n\nCreating a LinearStateSpaceProblem and simulating it for a simple linear equation\n\njulia\nusing DifferentialEquations LinearAlgebra Distributions Random Plots\nA = 08 00 01 07\nB = Diagonal(01 05)\nC = 05 05  one observable\nR = 001\n\n Simulate data\nT = 10\nu₀=00 01\ntspan = (0 T)\n\nprob = LinearStateSpaceProblem(ABu₀tspan C = C R = R)\n\n\nWe can solve the model to simulate a path  Since we have not provided the w_t or v_t sequence it will simulate it using the default Gaussian draws  The use of the algorithm LinearGaussian() is a specialization\n\njulia\nsol = solve(prob LinearGaussian())   default algorithm is linear-gaussian iteration\nshow sol1   This is the observation at the first time period\nshow sol1   the observation of the first value for all periods\n\nplot(sol)   or plot(solz)\n\n\nThe u state is not-observable in the primary output  To access the simulated values\n\njulia\nplot(solu)\n\n\n note\n\n    Since the output of the state space model is the observables solij refers to solzij instead of soluij\n\nAssuming that you chose to save the noise and the observational_noise (ie solve(prob save_noise = true save_observational_noise = true) are the defaults then you can also access them through\n\njulia\nplot(solW)   noise on the evolution equation\nplot(solV)   observational noise if it exists","category":"page"},{"location":"examples/linear_state_space_examples/#Example-2:-Kalman-Filter-for-LTI-System","page":"Linear State Space Examples","title":"Example 2: Kalman Filter for LTI System","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Here, we will setup a LinearStateSpaceProblem with a prior, and calculate the likelihood of the observables using the KalmanFilter (which will be exact in this case since we provide a linear gaussian model).","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"p = [0.8, 0.05, 0.01]\nT = 10\nu₀_prior = MvNormal([0.0, 0.1], Diagonal([0.01, 0.01])\ntspan = (0, T)\n\nprob = LinearStateSpaceProblem(A, B, u₀_prior, tspan; C = C, R = R)  # prior for initial condition\n# Simulate some observables, where u0 is drawn from the prior\nsol_sim = solve(prob, LinearGaussian())\nz = sol_sim","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Then, attach the observables, and calculate the likelihood,","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"prob = LinearStateSpaceProblem(A, B, u₀_prior, tspan; C = C, R = R, observables = z)\nsol = solve(prob, KalmanFilter(); save_everystep = true)\n@show sol.logpdf","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Or, we can use the sol to extract the sequence of posteriors.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"# Or to extract the posteriors\nplot(sol.t, [mean(posterior) for posterior in sol.posteriors])\nplot(sol.t, [cov(posterior) for posterior in  sol.posteriors])  # posterior covariance\n\n# TODO: add recipe of some sort?  posterior mean and the 5th/95th quantiles around it?\nplot(sol)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"To run the filter without storing the intermediate values (e.g. if you only need the log likelihood), use the standard solve options - where save_everystep = false is the default.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"sol = solve(prob, KalmanFilter(); save_everystep = false, save_posteriors = false)\nsol.t  # does not save all time periods and saves no posteriors","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Note: If we wish to run a smoother, we can replace the algorithm with KalmanSmoother(), which will update the u and posteriors on its back-pass.","category":"page"},{"location":"examples/linear_state_space_examples/#Example-3:-Differentiating-the-Kalman-Filter","page":"Linear State Space Examples","title":"Example 3: Differentiating the Kalman Filter","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"We are then able to differentiate the filter.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function logpdf_KF(z, u₀, p)\n    # parameterize matrices\n    A = [p[1] 0.0; 0.1 0.7]\n    B = Diagonal([0.1, p[2]])\n    C = [0.5 0.5]\n    R = [p[3]]  # one observable\n\n    prob = LinearStateSpaceProblem(A, B, u₀,tspan; C=C, R=R)  # Gaussian noise\n    return solve(prob, KalmanFilter(), save_everystep = false).logpdf\nend\ngradient(p -> logpdf_KF(z, u₀, p), p)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Note that we have bound the initial prior but could have parameterized and differentiated that as well.","category":"page"}]
}
